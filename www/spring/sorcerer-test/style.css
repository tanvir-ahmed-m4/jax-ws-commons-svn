/*
  CSS that one might want to change for visual appearance
  ====================================================================================================
*/
body {
  font-family: verdana, sans-serif;
}
a:link {
  color: inherit;
  text-decoration: none;
}
a:visited {
  color: inherit;
  text-decoration: none;
}
a:hover {
  color: inherit;
  text-decoration: underline;
}
div.footer {
  width: 100%;
  text-align:right;
  color: gray;
  margin-right: 2em;
  border-top: 1px solid gray;
  font-size: smaller;
}
#homelink {
  text-decoration: underline;
}
#main {
  font-weight: bold;
}
#lineNumberTable {
  color: gray;
}
.highlighted-bracket {/* when you hover on '{', the corresponding '}' gets this class. */
  background-color: cornflowerblue;
  color: white;
}


/*
  CSS for controlling popups
  ====================================================================================================

  most likely you don't want to touch these
*/
b {/* we use <b> instead of <span> to save space */
  text-decoration: none;
}
span.bookmark {
	position: relative;
}
span.bookmark div {
	position: absolute;
	top: 1em;
	left: 0;

	border: 1px solid #333;
	background: #FFF;
	white-space: nowrap;
	display: none;
	z-index: 100;
}

PRE {
  /* needed by Firefox */
  margin-top:0px;
  margin-bottom:0px;
}

#menuSelector {/* used for showing '>' on the right of the anchor */
  background-color:#f6f7ee;
  border:solid 1px #c4c4be;
  background-image: url(menu/rightarrow.gif);
  background-position: center center;
  background-repeat: no-repeat;
  width: 14px;
  height:14px;
  position: absolute;
  visibility: hidden;
  cursor: pointer;
}



/*
  CSS for syntax highlights
  ====================================================================================================

  CSS classes that appear both with reference and declaration
  -----------------------------------------------------------
  an : annotation type
  cl : class type
  co : constructor
  ec : enum constant
  en : enum type
  ex : parameter of the exception handler (e.g., "catch(Exception #e#)"
  fi : field (e.g., "myObj.#myField#")
  ii : instance initializer block
  it : interface type
  lv : local variable
  me : method invocation (e.g., "myObj.#myMethod#()")
  pk : package
  pa : method/constructor parameter
  si : static initializer block
  tp : type parameter (e.g., "class List<#T#>")

  above classes always appear with one of the following CSS classes
    r  : reference
    d  : declaration

  when applicable, it will also have some of the following CSS classes
    st : when the declaration (or the referenced declaration) is static
    dp : deprecated

  CSS classes without r/d marker
  --------------------------------
  cs : single line comment (e.g., "#// foo#"
  cm : multi line comment  (e.g., "#/*foo ...")
  cj : javadoc comment     (e.g., "#/** foo ...")
  lt : literal
  pr : primitive
  rw : reserved words like 'synchronized'
*/

.r.an {
  color: rgb(100,100,100);
}

.fi {
  color: rgb(0,0,192);
}

.rw, .pr {
  color: rgb(127,0,85);
}

.lt {
  color: rgb(42,0,255);
}

.tp {
  color: rgb(100,70,50);
}

.cs, .cm {
  color: rgb(63,127,95);
}

.cj {
  color: rgb(64,95,191);
}

.r.dp { /* Note that IE6 has a bug and ignores ".r" portion. */
  text-decoration: line-through;
}

.r.st { /* Note that IE6 has a bug and ignores ".r" portion. */
  font-style: italic;
}




/*
  CSS for bookmarks
  ====================================================================================================
*/

.overridden > OL {
  margin: 0px;
  padding: 0px;
  list-style: none;
}
